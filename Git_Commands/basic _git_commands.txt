1. git add .                  --- Add all files to staggin area for tracking by git. 
        |--git add <files >   --- Add the specific file to stagging area for tracking.
3. git commit -m "Message"    --- Commit the changes to files presents in the staging Area.
4. git status                 --- Command will check the status of files.
                                        |
                                        |-U (untracked)=Shows the untracked files 
                                        |-M (modified) =Show modified files 
                                        |-[green M] or A (stagged)  = Show files ready for commit or say in the stagging Area.
                                        |-(unmodified) = Shows umodified files 
5. git clone <git repo URL>  --- Clone the git repo from github to the Local device (VSC).
6. git reset                 --- Reset all the Staging Area 
        |--git reset <file>  --- Reset the file from the Staging Area


7. git diff                  --- Shows all the changes by:
       |                                                 (a) comparing staging area with working directory 
       |                                                 (b) If Staging Area is empty then git compare working directory with last commit and shows the untracked changes.
       |       NOTE: If no changes are there in working directory then there is no output of command git diff
       |
       |
       Varients of git diff:
                   (a) git diff:
                         -Shows changes between working directory and staging area.
                         -Use when you want to see what you have changed but not yet staged.
                        
                   (b) git diff --cached (or git diff --staged): 
                         -Shows changes between staging area and last commit.
                         -Use when you want to see what is staged but not yet committed.
        NOTE : If no last commit is there then it shows every file or line as newely added or it will compare last empty commit with working directory                  
                        
                   (c) git diff <commit>: 
                         -Compares working directory and a specific commit.

                   (d) git diff <commit1> <commit2>:
                         -Compares two commits with each other.
                        
                   (e) git diff --name-only :
                         -Shows only the file names that have changed, not the actual content differences.
                        
                   (f) git diff --name-status:
                         -Shows file names and status (A = Added, M = Modified, D = Deleted).
                        
                   (g) git diff --stat :
                         -Shows a summary of changes (files changed, lines added/removed).
                        
                   (h) git diff <file>:
                         -Shows changes only for a specific file.
                        
                   (i) git diff HEAD:
                         -Compares working directory with the last commit.
                        
                   (j) git diff <branch1> <branch2> 
                         -Shows changes between two branches.
8. git restore <file>    ---- Restores the file to the last commit 
              |                                                   |
              |-------Varients of git restore <file>--------------|
                           |
                           |----(a). git restore . : Restore all the files to last commit 
                           |----(b). git restore --staged <file> : Restore file to last commit in stagged area 
                           |                                                           OR
                           |                                       Reset the staging area of file so that it restore to last commit.
                           |----(c). git restore --staged . : Restore file all files in stagged area {same as git restore --staged <file>}
                           |                                  but it done to all files 
                           |----(d). git restore --source=<commit_hash> <file> : Restore file to specific commit    
                           |----(e). git restore --source=other-branch <file> : Restore file from another brach without switching to it .
9. git reset <file>: It reset the file in(only) the staging area to last commit .
     |
     |----------------------------Varients of git reset <file>----------------------------------------------
     |
     |----(a). git reset : It reset all file (only) in the staging Area.
***  |----(b). git rm --cached <file> : It remove file from staging Area and tell git to stop Tracking but keeps locally.
     |----(c). git reset HEAD~1 : If file is Commited but not pushed to github then with this Command we 
     |                              Can remove remove last commit but keeps changes in working directory.
     |
     |
     |

10. git log : Shows the full history of the commit 

11. c

13. git show <commit_id> : Shows the details of specific commit.

12. git branch : show the all the branches 

14. git commit --amend -m "__message here __" : Helps in editing last commit message if not pushed to github.

15. git init : for Initilize a new git Repo ( Used to start tracking the git repo LOCALLY )

16. git remote -v : Used to check in which github repo files are pushed and fetched (pulled).
        |
        |--- (a). If after running commands nothing shows then there is no github repo told to git for pushing and pulling actions. 
        |
        |--- (b). git remote show origin : Used to show the detailed info of the main branch . 
        |
        |--- (c). git remote -vv : Shows which remote brach tracks the local brach . 

